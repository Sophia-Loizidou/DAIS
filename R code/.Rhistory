model.wave1
model.wave2 <- list(name = "wave2", cpt.type = "pcwsLinContMean", cpt = (1:99) * 15, jump.size = (-1)^{1:100},
n = 15 * 100, start = c(-1/2, 1/40))
model.wave2
length(model.wave2$cpt)
options(expressions = 500000)
## For piecewise-linear signals
library(earth)
library(stats)
library(IDetect)
library(cpop)
library(not)
#devtools::install_github("hadley/l1tf")
library("l1tf")
get.signal <- function(model){
if(model$cpt.type == "pcwsConstMean"){
signal <- rep(0, model$n)
segments <- cbind(c(1,model$cpt+1), c(model$cpt,model$n))
signal[segments[1,1]:segments[1,2]] <- model$start[1]
for(j in 2:nrow(segments)) signal[segments[j,1]:segments[j,2]] <- signal[segments[j,1]-1] + model$jump.size[j-1]
}else if(model$cpt.type == "pcwsLinContMean"){
if(length(model$cpt) != 0){
signal <- rep(0, model$n)
segments <- cbind(c(1,model$cpt+1), c(model$cpt,model$n))
slope <- model$start[2]
signal[segments[1,1]:segments[1,2]] <- model$start[1] + segments[1,1]:segments[1,2] * model$start[2]
for(j in 2:nrow(segments)) {
slope <- slope +  model$jump.size[j-1]
for(k in segments[j,1]:segments[j,2]) signal[k] <- signal[k-1] + slope
}
} else {
signal <- rep(0, model$n)
slope <- model$start[2]
for(k in 2:model$n) signal[k] <- signal[k-1] + slope
}
}
return(signal)
}
sim.model <- function(model, sigma=1){
get.signal(model) + sigma * rnorm(model$n)}
## The following function is to get the estimated signal in the case of piecewise-linearity.
fit_lin_cont <- function(x, cpt) {
lx = length(x)
if (missing(cpt))
cpt <- linear_find_changepoint_ic_fixedw3(x)
if (!is.null(cpt))
if (any(is.na(cpt)))
cpt <- cpt[!is.na(cpt)]
cpt <- sort(unique(c(cpt, 0, lx)))
fit <- rep(0, lx)
cpt <- setdiff(cpt, c(0, lx))
X <- bs(1:lx, knots = cpt, degree = 1, intercept = TRUE)
fit <- lm.fit(X, x)$fitted.values
return(fit)
}
## run trend-filtering input data
tf.run = function(z, sig = 1, lambdas = exp(seq(log(10), log(1000), length = 250))) {
M = length(lambdas)
n = length(z)
SIC = rep(0, M)
for (i in 1:M) {
lambda <- lambdas[i]
ans.tf <- l1tf(z, lambda)
SIC[i] = sum((z - ans.tf)^2)
dans <- round(diff(ans.tf), digits = 5)
CP <- c()
for (ii in 1:(length(dans) - 1)) {
if (dans[ii] != dans[ii + 1]) {
CP <- c(CP, ii)
}
}
SIC[i] = SIC[i]/sig^2 + log(n) * length(CP)
}
k = which.min(SIC)
ans.tf <- l1tf(z, lambdas[k])
dans <- round(diff(ans.tf), digits = 5)
CP <- c()
for (ii in 1:(length(dans) - 1)) {
if (dans[ii] != dans[ii + 1]) {
CP <- c(CP, ii)
}
}
return(list(cpt = CP, fit = ans.tf, lam = lambdas[k]))
}
## Functions for DAIS
largest_diff_slope <- function(x){
if(length(x) < 3){
diff <- 1
} else {
diff <- sort.int(abs(diff(diff(x))), decreasing=TRUE, index.return = TRUE)$ix[1]
}
return(diff)
}
endpoints <- function(l_diff, s, e, points = 3){
intervals <- list()
intervals[[1]] <- c(seq(l_diff, s, -points))
if (intervals[[1]][length(intervals[[1]])] != s){intervals[[1]] = c(intervals[[1]], s)}
intervals[[2]] <- seq(min(e, l_diff + points - 1), e, points)
if (intervals[[2]][length(intervals[[2]])] != e){intervals[[2]] = c(intervals[[2]], e)}
return(intervals)
}
cumsum_lin <- function(x) {
if (!(is.numeric(x))){
stop("The input in `x' should be a numeric vector.")
}
res <- numeric()
n <- length(x)
if (n <= 2) {
res <- 0
} else {
b <- 2:(n - 1)
y1 <- cumsum(x * (1:n))
y <- cumsum(x)
a <- sqrt(6 / ( (n - 1) * n * (n + 1) * (2 - 2 * b ^ 2 + 2 * b * n - 1 + 2 * b - n)))
be <- sqrt( ( (n - b + 1) * (n - b)) / ( (b - 1) * b))
res[1] <- 0
res[b] <- a * be * ( (2 * b + n - 1) * y1[b] - (n + 1) * b * y[b]) - (a / be) * ( ( 3 * n - 2 * b + 1) * (y1[n] - y1[b]) - (n + 1) * (2 * n - b) * (y[n] - y[b]))
}
return(res)
}
DAIS_slope <- function(x, sigma = stats::mad(diff(diff(x)))/sqrt(6), thr_const = 1.5,
thr_fin = sigma * thr_const * sqrt(2 * log(length(x))), s = 1,
e = length(x), points = 3, k_l = 1, k_r = 1,
left_checked = numeric(), right_checked = numeric(),
cpoints = numeric(), print = FALSE){
points <- as.integer(points)
l <- length(x)
chp <- 0
if (e - s <= 1) {
cpt <- 0
}
else{
cpoint <- largest_diff_slope(x[s:(e-1)]) + s - 1 #find largest differences
if(print == TRUE){cat('largest difference at', cpoint, 'when s is equal to', s, 'and e is', e, '\n')}
endpoints <- endpoints(l_diff=cpoint, s=s, e=e, points = points)
left_points <- endpoints[[1]]
right_points <- endpoints[[2]]
lur <- length(left_points)
rur <- length(right_points)
k_l_temp <- 1
k_r_temp <- 1
if(any(cpoint %in% cpoints)){
pos <- which(cpoints == cpoint)
for(i in 1:length(pos)){
if(left_checked[pos[i]] < left_points[lur]){
k_l_temp <- lur + 1
if(right_checked[pos[i]] > right_points[rur]){
k_r_temp <- rur + 1
} else {
last_checked_r <- which(right_points == right_checked[pos[i]])
k_r_temp <- max(last_checked_r, k_r)
k_r_temp <- min(lur, k_r_temp)
}
} else {
last_checked_l <- which(left_points == left_checked[pos[i]])
k_l_temp <- max(last_checked_l, k_l)
if(right_checked[pos[i]] > right_points[rur]){
k_r_temp <- rur + 1
k_l_temp <- min(k_l_temp, rur)
} else {
last_checked_r <- which(right_points == right_checked[pos[i]])
k_r_temp <- max(last_checked_r, k_r)
}
}
}
}
k_l_temp <- min(k_l_temp, lur)
k_r_temp <- min(k_r_temp, rur)
flag_l <- 0
flag_r <- 0
while((chp == 0) & ((k_l_temp <= lur) | (k_r_temp <= rur))){
if(print == TRUE){cat(left_points[k_l_temp],right_points[k_r_temp], '\n')}
x_temp <- x[left_points[k_l_temp]:right_points[k_r_temp]]
ipc <- cumsum_lin(x_temp)
pos <- which.max(abs(ipc)) + left_points[k_l_temp] - 1
CUSUM <- abs(ipc[pos - left_points[k_l_temp] + 1])
if (CUSUM > thr_fin) {
chp <- pos
if(print == TRUE){cat('cpt', chp, "detected in the interval [", left_points[k_l_temp],
',', right_points[k_r_temp], '] \n')}
}
else {
flag_l <- 0
flag_r <- 0
if((k_l_temp < lur) & (k_r_temp < rur)){
if(k_l_temp == k_r_temp){
k_l_temp = k_l_temp + 1
flag_l <- 1
}
else {
k_r_temp = k_r_temp+1
flag_r <- 1
}
} else if(k_l_temp < lur){
k_l_temp = k_l_temp + 1
flag_l <- 1
} else if(k_r_temp < rur){
k_r_temp = k_r_temp + 1
flag_r <- 1
} else{
k_l_temp = k_l_temp + 1
k_r_temp = k_r_temp + 1
flag_l <- 1
flag_r <- 1
}
}
}
cpoints <- c(cpoints, cpoint)
if(chp != 0){
left_checked <- c(left_checked, left_points[k_l_temp])
right_checked <- c(right_checked, right_points[k_r_temp])
} else {
if(flag_l == 1){
left_checked <- c(left_checked, left_points[k_l_temp - 1])
} else {
left_checked <- c(left_checked, left_points[k_l_temp])
}
if (flag_r == 1){
right_checked <- c(right_checked, right_points[k_r_temp - 1])
} else {
right_checked <- c(right_checked, right_points[k_r_temp])
}
}
if (chp != 0) {
r_left <- DAIS_slope(x, s = s, e = chp, points = points,
thr_fin = thr_fin, left_checked = left_checked,
right_checked = right_checked,
cpoints = cpoints, print = print)
r_right <- DAIS_slope(x, s = chp+1, e = e, points = points,
thr_fin = thr_fin, left_checked = left_checked,
right_checked = right_checked,
cpoints = cpoints, print = print)
cpt <- c(chp, r_left, r_right)
}
else {
cpt <- chp
}
}
cpt <- cpt[cpt != 0]
return(sort(cpt))
}
linear.rev.sim <- function(x, q_max_NOT = 25, FKS_knot = 10) {
setClass("cpt.est", representation(cpt = "numeric", nocpt = "numeric", fit = "numeric", time = "numeric", dh = "numeric"),
prototype(cpt = numeric(0), nocpt = 0, fit = numeric(0), time = numeric(0), dh = numeric(0)))
print("not")
z <- not(x, method = "not", contrast = "pcwsLinContMean")
cpt.ic = features(z, q.max = q_max_NOT)
notic <- new("cpt.est")
if (any(is.na(cpt.ic$cpt))) {
notic@cpt = 0
notic@nocpt = 0
} else {
notic@cpt = cpt.ic$cpt
notic@nocpt <- length(notic@cpt)
}
notic@fit <- fit_lin_cont(x, notic@cpt)
notic@time <- system.time(features(not(x, method = "not", contrast = "pcwsLinContMean"), q.max = q_max_NOT))[[3]]
print("CPOP")
z <- cpop(x, beta = 2*log(length(x)), sd = rep(mad(diff(diff(x)))/sqrt(6), length(x)))
cpop <- new("cpt.est")
if (length(z@changepoints) == 2) {
cpop@cpt = 0
cpop@nocpt = 0
} else {
cpop@cpt = z@changepoints[-c(1, length(z@changepoints))]
cpop@nocpt <- length(cpop@cpt)
}
cpop@fit <- fit_lin_cont(x, cpop@cpt)
cpop@time <- system.time(cpop(x, beta = 2*log(length(x)), sd = rep(mad(diff(diff(x)))/sqrt(6), length(x))))[[3]]
print("t1f")
z <- tf.run(x/(mad(diff(diff(x)))/sqrt(6)))
t1f <- new("cpt.est")
if (length(z$cpt) == 0) {
t1f@cpt = 0
t1f@nocpt = 0
} else {
t1f@cpt = z$cpt
t1f@nocpt <- length(z$cpt)
}
t1f@fit <- z$fit
t1f@time <- system.time(tf.run(x/(mad(diff(diff(x)))/sqrt(6))))[[3]]
print("MARS")
z1 <- earth(1:length(x),y=x)
z <- sort(unique(z1$cuts[z1$selected.terms,]))[-1]
MARS <- new("cpt.est")
if (length(z) == 0) {
MARS@cpt = 0
MARS@nocpt = 0
}
else {
MARS@cpt = z
MARS@nocpt = length(z)
}
MARS@fit <- fit_lin_cont(x, MARS@cpt)
MARS@time <- system.time(sort(unique(earth(1:length(x),y=x)$cuts[earth(1:length(x),y=x)$selected.terms,]))[-1])[[3]]
# print("FKS")
# z1 <-  fit.search.numknots(1:length(x), y = x, degree = 1, minknot = 1, maxknot = FKS_knot,
#                            alg = "LS", search = "genetic",
#                            knotnumcrit = "adjGCV", k = 2, d = 3, seed = 5,
#                            stream = 0)
# z <- round(z1@optknot)
# FKS <- new("cpt.est")
# if (length(z) == 0) {
#   FKS@cpt = 0
#   FKS@nocpt = 0
# } else {
#   FKS@cpt = z
#   FKS@nocpt <- length(z)
# }
# FKS@fit <- fit_lin_cont(x, FKS@cpt)
# FKS@time <- system.time(round(fit.search.numknots(1:length(x), y = x, degree = 1, minknot = 1, maxknot = FKS_knot,
#                                                   alg = "LS", search = "genetic",
#                                                   knotnumcrit = "adjGCV", k = 2, d = 3, seed = 5,
#                                                   stream = 0)@optknot))[[3]]
print("ID")
IsolateDetect <- new("cpt.est")
z = ID_cplm(x)
IsolateDetect@cpt <- as.numeric(z$cpt)
IsolateDetect@nocpt <- z$no_cpt
IsolateDetect@fit <- fit_lin_cont(x, IsolateDetect@cpt)
IsolateDetect@time <- system.time(ID_cplm(x))[[3]]
print("ID_th")
ID_th <- new("cpt.est")
z <- cplm_th(x, thr_const = 1.1)
if(length(z) == 0){ID_th@cpt = 0
ID_th@nocpt = 0}
else{ID_th@cpt <- z
ID_th@nocpt <- length(z)}
ID_th@fit <- fit_lin_cont(x, ID_th@cpt)
ID_th@time <- system.time(cplm_th(x, thr_const = 1.1))[[3]]
print("ID_sic")
ID_sic <- new("cpt.est")
z <- cplm_ic(x)
if(any(is.na(z$cpt_ic$sic_pen))){ID_sic@cpt = 0
ID_sic@nocpt = 0}
else{ID_sic@cpt <- z$cpt_ic$sic_pen
ID_sic@nocpt <- length(z$cpt_ic$sic_pen)}
ID_sic@fit <- fit_lin_cont(x, ID_sic@cpt)
ID_sic@time <- system.time(cplm_ic(x))[[3]]
print("DAIS")
DAIS <- new("cpt.est")
z = DAIS_slope(x)
DAIS@cpt <- as.numeric(z)
DAIS@nocpt <- length(z)
DAIS@fit <- fit_lin_cont(x, DAIS@cpt)
DAIS@time <- system.time(DAIS_slope(x))[[3]]
list(notic = notic, MARS = MARS, t1f = t1f, cpop = cpop, #FKS = FKS,
IsolateDetect = IsolateDetect, ID_th = ID_th, ID_sic = ID_sic, DAIS = DAIS)
}
linear_rev.sim.study <- function(model, sigma, m = 100, seed = NULL, gen_qmax = 25) {
setClass("est.eval", representation(avg.signal = "numeric", fit = "list", cpt = "list", diff = "matrix", dh = "numeric",
cptall = "numeric", dnc = "numeric", mse = "numeric", time = "numeric"),
prototype(dnc = numeric(m), mse = numeric(m), time = numeric(m), dh = numeric(m)))
DAIS <- new("est.eval")
IsolateDetect <- new("est.eval")
ID_th <- new("est.eval")
ID_sic <- new("est.eval")
notic <- new("est.eval")
cpop <- new("est.eval")
t1f <- new("est.eval")
MARS <- new("est.eval")
#FKS <- new("est.eval")
signal = get.signal(model)
no.of.cpt <- length(model$cpt)
n <- length(signal)
ns <- max(diff(c(0, model$cpt, n)))
if (!is.null(seed))
set.seed(seed)
for (i in 1:m) {
print(i)
x <- signal + sigma * rnorm(n)
est <- linear.rev.sim(x, q_max_NOT = gen_qmax, FKS_knot = no.of.cpt + 2)
notic@dnc[i] <- est$notic@nocpt - no.of.cpt
notic@cpt[[i]] <- est$notic@cpt
notic@mse[i] <- mean((signal - est$notic@fit)^2)
notic@diff <- abs(matrix(est$notic@cpt, nrow = no.of.cpt, ncol = length(est$notic@cpt), byr = T) - matrix(model$cpt,
nrow = no.of.cpt, ncol = length(est$notic@cpt), byr = F))
notic@dh[i] <- max(apply(notic@diff, 1, min), apply(notic@diff, 2, min))/ns
notic@time[i] <- est$notic@time
cpop@dnc[i] <- est$cpop@nocpt - no.of.cpt
cpop@cpt[[i]] <- est$cpop@cpt
cpop@mse[i] <- mean((signal - est$cpop@fit)^2)
cpop@diff <- abs(matrix(est$cpop@cpt, nrow = no.of.cpt, ncol = length(est$cpop@cpt), byr = T) - matrix(model$cpt,
nrow = no.of.cpt, ncol = length(est$cpop@cpt), byr = F))
cpop@dh[i] <- max(apply(cpop@diff, 1, min), apply(cpop@diff, 2, min))/ns
cpop@time[i] <- est$cpop@time
t1f@dnc[i] <- est$t1f@nocpt - no.of.cpt
t1f@cpt[[i]] <- est$t1f@cpt
t1f@mse[i] <- mean((signal - est$t1f@fit)^2)
t1f@diff <- abs(matrix(est$t1f@cpt, nrow = no.of.cpt, ncol = length(est$t1f@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$t1f@cpt), byr = F))
t1f@dh[i] <- max(apply(t1f@diff, 1, min), apply(t1f@diff, 2, min))/ns
t1f@time[i] <- est$t1f@time
MARS@dnc[i] <- est$MARS@nocpt - no.of.cpt
MARS@cpt[[i]] <- est$MARS@cpt
MARS@mse[i] <- mean((signal - est$MARS@fit)^2)
MARS@diff <- abs(matrix(est$MARS@cpt, nrow = no.of.cpt, ncol = length(est$MARS@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$MARS@cpt), byr = F))
MARS@dh[i] <- max(apply(MARS@diff, 1, min), apply(MARS@diff, 2, min))/ns
MARS@time[i] <- est$MARS@time
# FKS@dnc[i] <- est$FKS@nocpt - no.of.cpt
# FKS@mse[i] <- mean((signal - est$FKS@fit)^2)
# FKS@diff <- abs(matrix(est$FKS@cpt, nrow = no.of.cpt, ncol = length(est$FKS@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
#                                                                                                     ncol = length(est$FKS@cpt), byr = F))
# FKS@dh[i] <- max(apply(FKS@diff, 1, min), apply(FKS@diff, 2, min))/ns
# FKS@time[i] <- est$FKS@time
IsolateDetect@dnc[i] <- est$IsolateDetect@nocpt - no.of.cpt
IsolateDetect@cpt[[i]] <- est$IsolateDetect@cpt
IsolateDetect@mse[i] <- mean((signal - est$IsolateDetect@fit)^2)
IsolateDetect@diff <- abs(matrix(est$IsolateDetect@cpt, nrow = no.of.cpt, ncol = length(est$IsolateDetect@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$IsolateDetect@cpt), byr = F))
IsolateDetect@dh[i] <- max(apply(IsolateDetect@diff, 1, min), apply(IsolateDetect@diff, 2, min))/ns
IsolateDetect@time[i] <- est$IsolateDetect@time
ID_th@dnc[i] <- est$ID_th@nocpt - no.of.cpt
ID_th@cpt[[i]] <- est$ID_th@cpt
ID_th@mse[i] <- mean((signal - est$ID_th@fit)^2)
ID_th@diff <- abs(matrix(est$ID_th@cpt, nrow = no.of.cpt, ncol = length(est$ID_th@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$ID_th@cpt), byr = F))
ID_th@dh[i] <- max(apply(ID_th@diff, 1, min), apply(ID_th@diff, 2, min))/ns
ID_th@time[i] <- est$ID_th@time
ID_sic@dnc[i] <- est$ID_sic@nocpt - no.of.cpt
ID_sic@cpt[[i]] <- est$ID_sic@cpt
ID_sic@mse[i] <- mean((signal - est$ID_sic@fit)^2)
ID_sic@diff <- abs(matrix(est$ID_sic@cpt, nrow = no.of.cpt, ncol = length(est$ID_sic@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$ID_sic@cpt), byr = F))
ID_sic@dh[i] <- max(apply(ID_sic@diff, 1, min), apply(ID_sic@diff, 2, min))/ns
ID_sic@time[i] <- est$ID_sic@time
DAIS@dnc[i] <- est$DAIS@nocpt - no.of.cpt
DAIS@cpt[[i]] <- est$DAIS@cpt
DAIS@mse[i] <- mean((signal - est$DAIS@fit)^2)
DAIS@diff <- abs(matrix(est$DAIS@cpt, nrow = no.of.cpt, ncol = length(est$DAIS@cpt), byr = T) - matrix(model$cpt, nrow = no.of.cpt,
ncol = length(est$DAIS@cpt), byr = F))
DAIS@dh[i] <- max(apply(DAIS@diff, 1, min), apply(DAIS@diff, 2, min))/ns
DAIS@time[i] <- est$DAIS@time
}
list(notic = notic, MARS = MARS, t1f = t1f, cpop = cpop, #FKS = FKS,
IsolateDetect = IsolateDetect, ID_th = ID_th, ID_sic = ID_sic, DAIS = DAIS)
}
## Present results
make_df <- function(x, decimals = 3){
results <- data.frame('Method' = c('DAIS', 'ID', 'ID', 'ID_th', "CPOP", 'NOT', 'MARS', 't1f'),
'MSE' = rep(NA),
'dh' = rep(NA),
'time' = rep(NA))
results$MSE[1] <- signif(mean(x$DAIS@mse), decimals)
results$MSE[2] <- signif(mean(x$IsolateDetect@mse), decimals)
results$MSE[3] <- signif(mean(x$ID_th@mse), decimals)
results$MSE[4] <- signif(mean(x$ID_sic@mse), decimals)
results$MSE[5] <- signif(mean(x$cpop@mse), decimals)
results$MSE[6] <- signif(mean(x$notic@mse), decimals)
results$MSE[7] <- signif(mean(x$MARS@mse), decimals)
results$MSE[8] <- signif(mean(x$t1f@mse), decimals)
results$dh[1] <- signif(mean(x$DAIS@dh), decimals)
results$dh[2] <- signif(mean(x$IsolateDetect@dh), decimals)
results$dh[3] <- signif(mean(x$ID_th@dh), decimals)
results$dh[4] <- signif(mean(x$ID_sic@dh), decimals)
results$dh[5] <- signif(mean(x$cpop@dh), decimals)
results$dh[6] <- signif(mean(x$notic@dh), decimals)
results$dh[7] <- signif(mean(x$MARS@dh), decimals)
results$dh[8] <- signif(mean(x$t1f@dh), decimals)
results$time[1] <- signif(mean(x$DAIS@time), decimals)
results$time[2] <- signif(mean(x$IsolateDetect@time), decimals)
results$time[3] <- signif(mean(x$ID_th@time), decimals)
results$time[4] <- signif(mean(x$ID_sic@time), decimals)
results$time[5] <- signif(mean(x$cpop@time), decimals)
results$time[6] <- signif(mean(x$notic@time), decimals)
results$time[7] <- signif(mean(x$MARS@time), decimals)
results$time[8] <- signif(mean(x$t1f@time), decimals)
return(results)
}
cpts_df <- function(x, breaks){
x1 <- cut(x$DAIS@dnc, breaks = breaks)
x2 <- cut(x$IsolateDetect@dnc, breaks = breaks)
x3 <- cut(x$ID_th@dnc, breaks = breaks)
x4 <- cut(x$ID_sic@dnc, breaks = breaks)
x5 <- cut(x$cpop@dnc, breaks = breaks)
x6 <- cut(x$notic@dnc, breaks = breaks)
x7 <- cut(x$MARS@dnc, breaks = breaks)
x8 <- cut(x$t1f@dnc, breaks = breaks)
cname <- c('Method', levels(x1))
df <- data.frame(matrix(ncol = length(cname), nrow=8))
colnames(df) <- cname
df$Method <- c('DAIS', 'ID', 'ID_th', 'ID_sic', 'CPOP', 'NOT', 'MARS', 't1f')
for(i in 2:(length(cname))){
df[1,i] <- sum(x1 == cname[i])
df[2,i] <- sum(x2 == cname[i])
df[3,i] <- sum(x3 == cname[i])
df[4,i] <- sum(x4 == cname[i])
df[5,i] <- sum(x5 == cname[i])
df[6,i] <- sum(x6 == cname[i])
df[7,i] <- sum(x7 == cname[i])
df[8,i] <- sum(x8 == cname[i])
}
return(df)
}
make_table <- function(x, breaks){
df1 <- make_df(x)
df2 <- cpts_df(x, breaks)
df <- cbind(df2, df1[,-1])
return(df)
}
model.wave2 <- list(name = "wave2", cpt.type = "pcwsLinContMean", cpt = (1:99) * 15, jump.size = (-1)^{1:100},
n = 15 * 100, start = c(-1/2, 1/40))
ts.plot(get.signal(model.wave2)+rnorm(1500, sd=1))
lin.SIMR2 = linear_rev.sim.study(model.wave2, 1, seed = 16, gen_qmax = 200)
make_table(lin.SIMR2, breaks = c(-100,-15,-2,-1,0,1,14, 115))
model.wave3 <- list(name = "wave3", cpt.type = "pcwsLinContMean", cpt = (1:119) * 7, jump.size = (-1)^{1:120},
n = 840, start = c(-1/2, 1/32))
model.wave3
sqrt(72)
3*sqrt(72)
8*sqrt(3*(3/2)^3)
